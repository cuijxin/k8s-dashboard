package api

import (
	"time"

	"k8s.io/client-go/tools/clientcmd/api"
)

const (
	// EncryptionKeyHolderName is indicated that the resource information that are used
	// as encryption key storage. Can be accessible by multiple dashboard replicas.
	EncryptionKeyHolderName = "kubernetes-dashboard-key-holder"

	// CertificateHolderSecretName is indicated that the resource information that are
	// used as certificate storage for custom certificates used by the user.
	CertificateHolderSecretName = "kubernetes-dashboard-certs"

	// DefaultTokenTTL is indicated that the expiration time (in seconds) of tokens
	// generated by dashboard. Default: 15 min.
	DefaultTokenTTL = 900
)

// AuthenticationModes represents auth modes supported by dashboard.
type AuthenticationModes map[AuthenticationMode]bool

// ProtectedResource represents basic information about resource that should be
// filtered out from Dashboard UI.
type ProtectedResource struct {
	// ResourceName is a name of the protected resource.
	ResourceName string
	// ResourceNamespace is a namespace of the protected resource. Should be empty
	// if resource is non-namespaced.
	ResourceNamespace string
}

// IsEnabled returns true if given auth mode is supported, false otherwise.
func (a AuthenticationModes) IsEnabled(mode AuthenticationMode) bool {
	_, exists := a[mode]
	return exists
}

// Array returns array of auth modes supported by dashboard.
func (a AuthenticationModes) Array() []AuthenticationMode {
	modes := []AuthenticationMode{}
	for mode := range a {
		modes = append(modes, mode)
	}

	return modes
}

// Add adds given auth mode to AuthenticationModes map
func (a AuthenticationModes) Add(mode AuthenticationMode) {
	a[mode] = true
}

// AuthenticationMode represents auth mode supported by dashboard. i.e. basic.
type AuthenticationMode string

// String returns string representation of auth mode.
func (a AuthenticationMode) String() string {
	return string(a)
}

// Authentication modes supported by dashboard should be defined below.
const (
	Token AuthenticationMode = "token"
	Basic AuthenticationMode = "basic"
)

// AuthManager is used for user authentication management.
type AuthManager interface {
	// Login authenticates user based on provided LoginSpec and returns AuthResponse.
	// AuthResponse contains generated token and list of non-critical errors such
	// as 'Failed authentication'.
	Login(*LoginSpec) (*AuthResponse, error)
	// Refresh takes valid token that hasn't expired yet and returns a new one with
	// expiration time set to TokenTTL. In case provided token has expired, token
	// expiration error is returned.
	Refresh(string) (string, error)
	// AuthenticationModes returns array of auth modes supported by dashboard
	AuthenticationModes() []AuthenticationMode
	// AuthenticationSkippable tells if the Skip button should be enabled or not
	AuthenticationSkippable() bool
}

// TokenManager is responsible for generating and decrypting tokens used for authorization.
// Authorization is handled by K8S apiserver. Token contains AuthInfo structure
// used to create K8S api client.
type TokenManager interface {
	// Generate secure token based on AuthInfo structure and save it token's payload.
	Generate(api.AuthInfo) (string, error)
	// Decrypt generated token and return AuthInfo structure that will be used for
	// K8S api client creation.
	Decrypt(string) (*api.AuthInfo, error)
	// Refresh returns refreshed token based on provided token. In case provided
	// token has expired, token expiration error is returned.
	Refresh(string) (string, error)
	// SetTokenTTL sets expiration time (in seconds) of generated tokens.
	SetTokenTTL(time.Duration)
}

// Authenticator represents authentication methods supported by Dashboard. Currently
// supported types are:
// 	- Token based - Any bearer token accepted by apiserver
// 	- Basic - Username and password based authentication. Requires that apiserver
//            has basic auth enabled also
// 	- Kubeconfig based - Authenticates useer based on kubeconfig file. Only token/basic
// 											 modes are supported within the kubeconfig file.
type Authenticator interface {
	// GetAuthInfo returns filled AuthInfo structure that can be used for K8S api
	// client creation.
	GetAuthInfo() (api.AuthInfo, error)
}

// LoginSpec is extracted from request coming from Dashboard frontend login request.
// It contains all the information required to authenticate user.
type LoginSpec struct {
	// Username is the username for basic authentication to the kubernetes cluster.
	Username string `json:"username,omitempty"`
	// Password is the password for basic authentication to the kubernetes cluster.
	Password string `json:"password,omitempty"`
	// Token is the bearer token for authentication to the kubernetes cluster.
	Token string `json:"token,omitempty"`
	// KubeConfig is the content of users' kubeconfig file. It will be parsed and auth
	// data will be extracted. Kubeconfig can not contain any paths. All data has
	// to provided within the file.
	KubeConfig string `json:"kubeconfig,omitempty"`
}

// AuthResponse is returned from our backend as a response for login/refresh requests.
// It contains generated JWEToken and a list of non-critical errors such as
// 'Failed authentication'.
type AuthResponse struct {
	// JWEToken is a token generated during login request that contains AuthInfo data
	// in the payload.
	JWEToken string `json:"jweToken"`
	// Errors are a list of non-critical errors that happend during login request.
	Errors []error `json:"errors"`
}

// LoginModesResponse contains list of auth modes supported by dashboard.
type LoginModesResponse struct {
	Modes []AuthenticationMode `json:"modes"`
}

// LoginSkippableResponse contains a flag that tells the UI not do display the Skip
// button. Note that this only hides the button, it doesn't disable unauthenticated
// access.
type LoginSkippableResponse struct {
	Skippable bool `json:"skippable"`
}
